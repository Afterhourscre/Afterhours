<?php
/**
 * Copyright 2019 aheadWorks. All rights reserved.
See LICENSE.txt for license details.
 */

namespace Aheadworks\Coupongenerator\Setup;

use Magento\Framework\App\State;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Setup\UpgradeDataInterface;
use Magento\Framework\Setup\ModuleContextInterface;
use Magento\Framework\Setup\ModuleDataSetupInterface;
use Magento\SalesRule\Api\Data\CouponInterface;
use Magento\SalesRule\Api\CouponRepositoryInterface;
use Magento\SalesRule\Model\Spi\CouponResourceInterface;
use Magento\Framework\Api\SearchCriteriaBuilderFactory;
use Magento\SalesRule\Api\RuleRepositoryInterface;
use Magento\SalesRule\Api\Data\RuleInterface;
use Aheadworks\Coupongenerator\Model\SalesruleRepository;

/**
 * Class UpgradeData
 * @package Aheadworks\Coupongenerator\Setup
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 * @codeCoverageIgnore
 */
class UpgradeData implements UpgradeDataInterface
{
    /**
     * Coupon type code used in 1.0.0-1.0.1 versions
     */
    const OLD_CCG_RULE_COUPON_TYPE = 4;

    /**
     * @var CouponRepositoryInterface
     */
    private $couponRepository;

    /**
     * @var CouponResourceInterface
     */
    private $couponResource;

    /**
     * @var RuleRepositoryInterface
     */
    private $ruleRepository;

    /**
     * @var SalesruleRepository
     */
    private $salesruleRepository;

    /**
     * @var SearchCriteriaBuilderFactory
     */
    private $searchCriteriaBuilderFactory;

    /**
     * @param State $appState
     * @param CouponRepositoryInterface $couponRepository
     * @param CouponResourceInterface $couponResource
     * @param SearchCriteriaBuilderFactory $searchCriteriaBuilderFactory
     * @param RuleRepositoryInterface $ruleRepository
     * @param SalesruleRepository $salesruleRepository
     */
    public function __construct(
        State $appState,
        CouponRepositoryInterface $couponRepository,
        CouponResourceInterface $couponResource,
        SearchCriteriaBuilderFactory $searchCriteriaBuilderFactory,
        RuleRepositoryInterface $ruleRepository,
        SalesruleRepository $salesruleRepository
    ) {
        try {
            $appState->setAreaCode(\Magento\Framework\App\Area::AREA_ADMINHTML);
        } catch (LocalizedException $e) {
        }
        $this->couponRepository = $couponRepository;
        $this->couponResource = $couponResource;
        $this->searchCriteriaBuilderFactory = $searchCriteriaBuilderFactory;
        $this->ruleRepository = $ruleRepository;
        $this->salesruleRepository = $salesruleRepository;
    }

    /**
     * {@inheritdoc}
     */
    public function upgrade(ModuleDataSetupInterface $setup, ModuleContextInterface $context)
    {
        $setup->startSetup();

        if ($context->getVersion()
            && version_compare($context->getVersion(), '1.1.0', '<')
        ) {
            $this->convertRules();
        }

        $setup->endSetup();
    }

    /**
     * Convert rules created by old version of CCG
     *
     * @return $this
     */
    private function convertRules()
    {
        /** @var \Magento\Framework\Api\SearchCriteriaBuilder $searchCriteriaBuilder */
        $searchCriteriaBuilder = $this->searchCriteriaBuilderFactory->create();
        $searchCriteriaBuilder->addFilter('coupon_type', self::OLD_CCG_RULE_COUPON_TYPE);
        $searchCriteria = $searchCriteriaBuilder->create();

        /** @var \Magento\SalesRule\Api\Data\RuleInterface $item */
        foreach ($this->ruleRepository->getList($searchCriteria)->getItems() as $item) {
            try {
                /** @var \Aheadworks\Coupongenerator\Api\Data\SalesruleInterface $salesruleDataObject */
                $salesruleDataObject = $this->salesruleRepository->getByRuleId($item->getRuleId());

                /** @var \Magento\SalesRule\Api\Data\RuleInterface $ruleDataObject */
                $ruleDataObject = $this->ruleRepository->getById($salesruleDataObject->getRuleId());
                $ruleDataObject->setCouponType(RuleInterface::COUPON_TYPE_SPECIFIC_COUPON);
                $ruleDataObject->setUseAutoGeneration(true);

                $this->ruleRepository->save($ruleDataObject);

                $this->convertCoupons($ruleDataObject->getRuleId());
            } catch (NoSuchEntityException $e) {
            }
        }

        return $this;
    }

    /**
     * Convert coupons generated by old version of CCG
     *
     * @param int $ruleId
     * @return $this
     */
    private function convertCoupons($ruleId)
    {
        /** @var \Magento\Framework\Api\SearchCriteriaBuilder $searchCriteriaBuilder */
        $searchCriteriaBuilder = $this->searchCriteriaBuilderFactory->create();
        $searchCriteriaBuilder->addFilter('rule_id', $ruleId);

        $couponsList = $this->couponRepository
            ->getList($searchCriteriaBuilder->create())
            ->getItems()
        ;
        foreach ($couponsList as $couponData) {
            if (is_array($couponData)) {
                /** @var \Magento\SalesRule\Api\Data\CouponInterface $coupon */
                $coupon = $this->couponRepository->getById($couponData['coupon_id']);
            } else {
                $coupon = $couponData;
            }

            if ($coupon->getType() == CouponInterface::TYPE_MANUAL) {
                $coupon->setType(CouponInterface::TYPE_GENERATED);

                // resource model is used to avoid reset expiration date
                $this->couponResource->save($coupon);
            }
        }

        return $this;
    }
}
